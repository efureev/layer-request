{"version":3,"file":"LayerConfig.js","names":["buildBaseAxiosConfig","baseURL","headers","LayerConfig","properties","Object","create","request","response","axiosRequestConfig","interceptors","merge","from","clone","toConfigObject","name","isEmpty","Error"],"sources":["../../src/LayerConfig.ts"],"sourcesContent":["import { clone, isEmpty, merge } from '@feugene/mu'\nimport type { AxiosRequestConfig, AxiosResponse } from 'axios'\nimport type { Recordable } from './global'\n\nfunction buildBaseAxiosConfig(): AxiosRequestConfig {\n  return {\n    baseURL: `/`,\n    headers: {},\n  }\n}\n\nexport type InterceptorSuccessParam<T> = (value: T) => T | Promise<T>\nexport type InterceptorErrorParam = ((error: any) => any) | undefined\nexport type InterceptorNormal<T> = [InterceptorSuccessParam<T>, InterceptorErrorParam]// | [InterceptorSuccessParam<T>]\nexport type InterceptorType<T> = (InterceptorSuccessParam<T>) | InterceptorNormal<T>\n\nexport type InterceptorFn<T> = (layer: LayerConfig, extra: ExtraProperties) => InterceptorType<T>\n\n\nexport interface ConfigLayerInterceptors {\n  request: InterceptorFn<AxiosRequestConfig>[];\n  response: InterceptorFn<AxiosResponse>[];\n}\n\nexport interface ConfigLayerConstructor {\n  axiosRequestConfig: AxiosRequestConfig;\n  interceptors: Partial<ConfigLayerInterceptors>;\n  from?: string;\n}\n\nexport type ExtraProperties = Recordable\nexport type LayerConfigStringable = LayerConfig | string\n\nexport default class LayerConfig {\n  public axiosRequestConfig: AxiosRequestConfig = {}\n\n  protected name?: string\n  public from?: string\n  protected parent?: string\n\n  public extra: ExtraProperties = Object.create(null)\n\n  public interceptors: ConfigLayerInterceptors = {\n    request: [],\n    response: [],\n  }\n\n  constructor(properties?: ConfigLayerConstructor) {\n    this.axiosRequestConfig = properties?.axiosRequestConfig || buildBaseAxiosConfig()\n\n    this.interceptors = merge(\n      {\n        request: [],\n        response: [],\n      },\n      <ConfigLayerInterceptors>properties?.interceptors,\n    ) as ConfigLayerInterceptors\n  }\n\n  public toConfigObject(): ConfigLayerConstructor {\n    return {\n      axiosRequestConfig: this.axiosRequestConfig,\n      interceptors: this.interceptors,\n      from: this.from,\n    }\n  }\n\n  public clone(): LayerConfig {\n    return new LayerConfig(clone(this.toConfigObject()))\n  }\n\n  public setName(name?: string): void {\n    if (isEmpty(name)) {\n      if (isEmpty(this.axiosRequestConfig.baseURL)) {\n        throw Error('You should add `name` to your layer or config must contains `baseURL` attribute!')\n      }\n\n      name = this.axiosRequestConfig.baseURL\n    }\n\n    this.name = name\n  }\n\n  public getName(): string {\n    return <string>this.name\n  }\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAIA,SAASA,oBAAT,GAAoD;EAClD,OAAO;IACLC,OAAO,KADF;IAELC,OAAO,EAAE;EAFJ,CAAP;AAID;;IAwBoBC,W;EAcnB,qBAAYC,UAAZ,EAAiD;IAAA;;IAAA,4CAbD,EAaC;;IAAA,+BAPjBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAOiB;;IAAA,sCALF;MAC7CC,OAAO,EAAE,EADoC;MAE7CC,QAAQ,EAAE;IAFmC,CAKE;;IAC/C,KAAKC,kBAAL,GAA0B,CAAAL,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEK,kBAAZ,KAAkCT,oBAAoB,EAAhF;IAEA,KAAKU,YAAL,GAAoB,IAAAC,SAAA,EAClB;MACEJ,OAAO,EAAE,EADX;MAEEC,QAAQ,EAAE;IAFZ,CADkB,EAKOJ,UALP,aAKOA,UALP,uBAKOA,UAAU,CAAEM,YALnB,CAApB;EAOD;;;;WAED,0BAAgD;MAC9C,OAAO;QACLD,kBAAkB,EAAE,KAAKA,kBADpB;QAELC,YAAY,EAAE,KAAKA,YAFd;QAGLE,IAAI,EAAE,KAAKA;MAHN,CAAP;IAKD;;;WAED,iBAA4B;MAC1B,OAAO,IAAIT,WAAJ,CAAgB,IAAAU,SAAA,EAAM,KAAKC,cAAL,EAAN,CAAhB,CAAP;IACD;;;WAED,iBAAeC,IAAf,EAAoC;MAClC,IAAI,IAAAC,WAAA,EAAQD,IAAR,CAAJ,EAAmB;QACjB,IAAI,IAAAC,WAAA,EAAQ,KAAKP,kBAAL,CAAwBR,OAAhC,CAAJ,EAA8C;UAC5C,MAAMgB,KAAK,CAAC,kFAAD,CAAX;QACD;;QAEDF,IAAI,GAAG,KAAKN,kBAAL,CAAwBR,OAA/B;MACD;;MAED,KAAKc,IAAL,GAAYA,IAAZ;IACD;;;WAED,mBAAyB;MACvB,OAAe,KAAKA,IAApB;IACD"}