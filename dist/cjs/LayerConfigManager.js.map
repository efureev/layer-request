{"version":3,"file":"LayerConfigManager.js","names":["layers","Map","LayerConfigManager","configValue","name","isFunction","addLayer","isObject","Error","LayerConfig","axiosRequestConfig","setName","set","getName","throws","l","get","Array","from","keys","clear","fromLayer","fn","newLayer","copy","copyFrom","getLayer","layerCopy","copyLayer","clone","options","manager"],"sources":["../../src/LayerConfigManager.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios'\nimport { isFunction, isObject } from '@feugene/mu'\nimport type { LayerConfigStringable } from './LayerConfig'\nimport LayerConfig, { ConfigLayerConstructor } from './LayerConfig'\nimport type { Nullable } from './global'\n\nconst layers = new Map<string, LayerConfig>()\n\ntype CreateLayerConfigFunction = (manager: LayerConfigManager) => AxiosRequestConfig | LayerConfig\ntype CreateLayerConfig = AxiosRequestConfig | LayerConfig | CreateLayerConfigFunction\ntype ModifyLayerConfigFn = (l: LayerConfig) => void\ntype CopyLayerConfigFn = (target: LayerConfig, source: LayerConfig) => void\n\nexport class LayerConfigManager {\n\n  addLayer(configValue: CreateLayerConfig, name?: string): LayerConfig {\n    if (isFunction(configValue)) {\n      return this.addLayer((<CreateLayerConfigFunction>configValue)(this), name)\n    }\n\n    if (!isObject(configValue)) {\n      throw Error('Invalid type of config!')\n    }\n\n    if (!(configValue instanceof LayerConfig)) {\n      configValue = new LayerConfig(<ConfigLayerConstructor>{ axiosRequestConfig: configValue })\n    }\n\n    configValue.setName(name)\n\n    layers.set(configValue.getName(), configValue)\n\n    return configValue\n  }\n\n  getLayer(name: LayerConfigStringable, throws: boolean = false): Nullable<LayerConfig> {\n    if (name instanceof LayerConfig) {\n      return name\n    }\n\n    const l = layers.get(name)\n    if (l) {\n      return l\n    }\n\n    if (throws) {\n      throw Error(`Config Layer with name '${name}' not found`)\n    }\n\n    return null\n  }\n\n\n  list(): string[] {\n    return Array.from(layers.keys()) //.map(name => name)\n  }\n\n  all(): Map<string, LayerConfig> {\n    return layers\n  }\n\n  reset(): this {\n    layers.clear()\n\n    return this\n  }\n\n  /**\n   * Add a copy of an existing LayerConfig to the Layer Manager\n   */\n  addCopyFrom(fromLayer: LayerConfigStringable, fn: CopyLayerConfigFn, newLayer?: string): LayerConfig {\n    const copy = this.copyFrom(fromLayer, fn)\n\n    return this.addLayer(copy, newLayer)\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig and set it up\n   */\n  copyFrom(fromLayer: LayerConfigStringable, fn: CopyLayerConfigFn): LayerConfig {\n    fromLayer = <LayerConfig>this.getLayer(fromLayer, true)\n    const layerCopy = this.copyLayer(fromLayer)\n\n    layerCopy.from = fromLayer.getName()\n\n    fn(layerCopy, fromLayer)\n\n    return layerCopy\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig\n   */\n  copyLayer(name: LayerConfigStringable): LayerConfig {\n    if (name instanceof LayerConfig) {\n      name = name.getName()\n    }\n\n    const l = <LayerConfig>this.getLayer(name, true)\n    return l.clone()\n  }\n\n  /**\n   * Update a LayerConfig by its name\n   */\n  updateLayer(name: string, fn: ModifyLayerConfigFn): this {\n    const l = this.getLayer(name, true)\n\n    fn(<LayerConfig>l)\n\n    return this\n  }\n\n  createLayer(options: ConfigLayerConstructor): LayerConfig {\n    return new LayerConfig(options)\n  }\n}\n\nconst manager = new LayerConfigManager()\n\nexport default manager\n"],"mappings":"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"}