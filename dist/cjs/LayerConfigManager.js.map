{"version":3,"file":"LayerConfigManager.js","names":["layers","Map","LayerConfigManager","configValue","name","isFunction","addLayer","isObject","Error","LayerConfig","axiosRequestConfig","setName","set","getName","throws","l","get","Array","from","keys","clear","fromLayer","fn","newLayer","withExtra","copy","copyLayerAndSetup","getLayer","layerCopy","copyLayer","clone","options","manager"],"sources":["../../src/LayerConfigManager.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios'\nimport { isFunction, isObject } from '@feugene/mu'\nimport type { LayerConfigStringable } from './LayerConfig'\nimport LayerConfig, { ConfigLayerConstructor } from './LayerConfig'\nimport { Undef } from './global'\n\nconst layers = new Map<string, LayerConfig>()\n\nexport type CreateLayerConfigFunction = (manager: LayerConfigManager) => AxiosRequestConfig | LayerConfig\ntype CreateLayerConfig = AxiosRequestConfig | LayerConfig | CreateLayerConfigFunction\ntype ModifyLayerConfigFn = (l: LayerConfig) => void\ntype CopyLayerConfigFn = (target: LayerConfig, source: LayerConfig) => void\n\nexport class LayerConfigManager {\n  addLayer(configValue: CreateLayerConfig, name?: string): LayerConfig {\n    if (isFunction(configValue)) {\n      return this.addLayer((<CreateLayerConfigFunction>configValue)(this), name)\n    }\n\n    if (!isObject(configValue)) {\n      throw Error('Invalid type of config!')\n    }\n\n    if (!(configValue instanceof LayerConfig)) {\n      configValue = new LayerConfig(<ConfigLayerConstructor>{ axiosRequestConfig: configValue })\n    }\n\n    configValue.setName(name)\n\n    layers.set(configValue.getName(), configValue)\n\n    return configValue\n  }\n\n  getLayer(name: LayerConfigStringable, throws: boolean = false): Undef<LayerConfig> {\n    if (name instanceof LayerConfig) {\n      return name\n    }\n\n    const l = layers.get(name)\n    if (l) {\n      return l\n    }\n\n    if (throws) {\n      throw Error(`Config Layer with name '${name}' not found`)\n    }\n  }\n\n  list(): string[] {\n    return Array.from(layers.keys())\n  }\n\n  all(): Map<string, LayerConfig> {\n    return layers\n  }\n\n  reset(): this {\n    layers.clear()\n\n    return this\n  }\n\n  /**\n   * Add a copy of an existing LayerConfig to the Layer Manager\n   */\n  addCopyFrom(\n    fromLayer: LayerConfigStringable,\n    fn: CopyLayerConfigFn,\n    newLayer?: string,\n    withExtra: boolean = false,\n  ): LayerConfig {\n    const copy = this.copyLayerAndSetup(fromLayer, fn, withExtra)\n\n    return this.addLayer(copy, newLayer)\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig and set it up\n   */\n  copyLayerAndSetup(fromLayer: LayerConfigStringable, fn: CopyLayerConfigFn, withExtra: boolean = false): LayerConfig {\n    fromLayer = <LayerConfig>this.getLayer(fromLayer, true)\n    const layerCopy = this.copyLayer(fromLayer, withExtra)\n\n    layerCopy.from = fromLayer.getName()\n\n    fn(layerCopy, fromLayer)\n\n    return layerCopy\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig\n   */\n  copyLayer(name: LayerConfigStringable, withExtra: boolean = false): LayerConfig {\n    if (name instanceof LayerConfig) {\n      name = name.getName()\n    }\n\n    const l = <LayerConfig>this.getLayer(name, true)\n    return l.clone(withExtra)\n  }\n\n  /**\n   * Update a LayerConfig by its name\n   */\n  updateLayer(name: string, fn: ModifyLayerConfigFn): this {\n    const l = this.getLayer(name, true)\n\n    fn(<LayerConfig>l)\n\n    return this\n  }\n\n  createLayer(options: ConfigLayerConstructor): LayerConfig {\n    return new LayerConfig(options)\n  }\n}\n\nconst manager = new LayerConfigManager()\n\nexport default manager\n"],"mappings":"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"}