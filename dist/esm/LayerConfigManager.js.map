{"version":3,"file":"LayerConfigManager.js","names":["isFunction","isObject","LayerConfig","layers","Map","LayerConfigManager","addLayer","configValue","name","Error","axiosRequestConfig","setName","set","getName","getLayer","throws","l","get","list","Array","from","keys","all","reset","clear","addCopyFrom","fromLayer","fn","newLayer","withExtra","copy","copyLayerAndSetup","layerCopy","copyLayer","clone","updateLayer","createLayer","options","manager"],"sources":["../../src/LayerConfigManager.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios'\nimport { isFunction, isObject } from '@feugene/mu'\nimport type { LayerConfigStringable } from './LayerConfig'\nimport LayerConfig, { ConfigLayerConstructor } from './LayerConfig'\nimport { Undef } from './global'\n\nconst layers = new Map<string, LayerConfig>()\n\nexport type CreateLayerConfigFunction = (manager: LayerConfigManager) => AxiosRequestConfig | LayerConfig\ntype CreateLayerConfig = AxiosRequestConfig | LayerConfig | CreateLayerConfigFunction\ntype ModifyLayerConfigFn = (l: LayerConfig) => void\ntype CopyLayerConfigFn = (target: LayerConfig, source: LayerConfig) => void\n\nexport class LayerConfigManager {\n  addLayer(configValue: CreateLayerConfig, name?: string): LayerConfig {\n    if (isFunction(configValue)) {\n      return this.addLayer((<CreateLayerConfigFunction>configValue)(this), name)\n    }\n\n    if (!isObject(configValue)) {\n      throw Error('Invalid type of config!')\n    }\n\n    if (!(configValue instanceof LayerConfig)) {\n      configValue = new LayerConfig(<ConfigLayerConstructor>{ axiosRequestConfig: configValue })\n    }\n\n    configValue.setName(name)\n\n    layers.set(configValue.getName(), configValue)\n\n    return configValue\n  }\n\n  getLayer(name: LayerConfigStringable, throws: boolean = false): Undef<LayerConfig> {\n    if (name instanceof LayerConfig) {\n      return name\n    }\n\n    const l = layers.get(name)\n    if (l) {\n      return l\n    }\n\n    if (throws) {\n      throw Error(`Config Layer with name '${name}' not found`)\n    }\n  }\n\n  list(): string[] {\n    return Array.from(layers.keys())\n  }\n\n  all(): Map<string, LayerConfig> {\n    return layers\n  }\n\n  reset(): this {\n    layers.clear()\n\n    return this\n  }\n\n  /**\n   * Add a copy of an existing LayerConfig to the Layer Manager\n   */\n  addCopyFrom(\n    fromLayer: LayerConfigStringable,\n    fn: CopyLayerConfigFn,\n    newLayer?: string,\n    withExtra: boolean = false,\n  ): LayerConfig {\n    const copy = this.copyLayerAndSetup(fromLayer, fn, withExtra)\n\n    return this.addLayer(copy, newLayer)\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig and set it up\n   */\n  copyLayerAndSetup(fromLayer: LayerConfigStringable, fn: CopyLayerConfigFn, withExtra: boolean = false): LayerConfig {\n    fromLayer = <LayerConfig>this.getLayer(fromLayer, true)\n    const layerCopy = this.copyLayer(fromLayer, withExtra)\n\n    layerCopy.from = fromLayer.getName()\n\n    fn(layerCopy, fromLayer)\n\n    return layerCopy\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig\n   */\n  copyLayer(name: LayerConfigStringable, withExtra: boolean = false): LayerConfig {\n    if (name instanceof LayerConfig) {\n      name = name.getName()\n    }\n\n    const l = <LayerConfig>this.getLayer(name, true)\n    return l.clone(withExtra)\n  }\n\n  /**\n   * Update a LayerConfig by its name\n   */\n  updateLayer(name: string, fn: ModifyLayerConfigFn): this {\n    const l = this.getLayer(name, true)\n\n    fn(<LayerConfig>l)\n\n    return this\n  }\n\n  createLayer(options: ConfigLayerConstructor): LayerConfig {\n    return new LayerConfig(options)\n  }\n}\n\nconst manager = new LayerConfigManager()\n\nexport default manager\n"],"mappings":"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"}