{"version":3,"file":"LayerConfigManager.js","names":["isFunction","isObject","LayerConfig","layers","Map","LayerConfigManager","addLayer","configValue","name","Error","axiosRequestConfig","setName","set","getName","getLayer","throws","l","get","list","Array","from","keys","all","reset","clear","addCopyFrom","fromLayer","fn","newLayer","withExtra","copy","copyLayerAndSetup","layerCopy","copyLayer","clone","updateLayer","createLayer","options","manager"],"sources":["../../src/LayerConfigManager.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios'\nimport { isFunction, isObject } from '@feugene/mu'\nimport type { LayerConfigStringable } from './LayerConfig'\nimport LayerConfig, { ConfigLayerConstructor } from './LayerConfig'\nimport { Undef } from './global'\n\nconst layers = new Map<string, LayerConfig>()\n\nexport type CreateLayerConfigFunction = (manager: LayerConfigManager) => AxiosRequestConfig | LayerConfig\ntype CreateLayerConfig = AxiosRequestConfig | LayerConfig | CreateLayerConfigFunction\ntype ModifyLayerConfigFn = (l: LayerConfig) => void\ntype CopyLayerConfigFn = (target: LayerConfig, source: LayerConfig) => void\n\nexport class LayerConfigManager {\n  addLayer(configValue: CreateLayerConfig, name?: string): LayerConfig {\n    if (isFunction(configValue)) {\n      return this.addLayer((<CreateLayerConfigFunction>configValue)(this), name)\n    }\n\n    if (!isObject(configValue)) {\n      throw Error('Invalid type of config!')\n    }\n\n    if (!(configValue instanceof LayerConfig)) {\n      configValue = new LayerConfig(<ConfigLayerConstructor>{ axiosRequestConfig: configValue })\n    }\n\n    configValue.setName(name)\n\n    layers.set(configValue.getName(), configValue)\n\n    return configValue\n  }\n\n  getLayer(name: LayerConfigStringable, throws: boolean = false): Undef<LayerConfig> {\n    if (name instanceof LayerConfig) {\n      return name\n    }\n\n    const l = layers.get(name)\n    if (l) {\n      return l\n    }\n\n    if (throws) {\n      throw Error(`Config Layer with name '${name}' not found`)\n    }\n  }\n\n  list(): string[] {\n    return Array.from(layers.keys())\n  }\n\n  all(): Map<string, LayerConfig> {\n    return layers\n  }\n\n  reset(): this {\n    layers.clear()\n\n    return this\n  }\n\n  /**\n   * Add a copy of an existing LayerConfig to the Layer Manager\n   */\n  addCopyFrom(\n    fromLayer: LayerConfigStringable,\n    fn: CopyLayerConfigFn,\n    newLayer?: string,\n    withExtra: boolean = false,\n  ): LayerConfig {\n    const copy = this.copyLayerAndSetup(fromLayer, fn, withExtra)\n\n    return this.addLayer(copy, newLayer)\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig and set it up\n   */\n  copyLayerAndSetup(fromLayer: LayerConfigStringable, fn: CopyLayerConfigFn, withExtra: boolean = false): LayerConfig {\n    fromLayer = <LayerConfig>this.getLayer(fromLayer, true)\n    const layerCopy = this.copyLayer(fromLayer, withExtra)\n\n    layerCopy.from = fromLayer.getName()\n\n    fn(layerCopy, fromLayer)\n\n    return layerCopy\n  }\n\n  /**\n   * Copy a LayerConfig from an existing LayerConfig\n   */\n  copyLayer(name: LayerConfigStringable, withExtra: boolean = false): LayerConfig {\n    if (name instanceof LayerConfig) {\n      name = name.getName()\n    }\n\n    const l = <LayerConfig>this.getLayer(name, true)\n    return l.clone(withExtra)\n  }\n\n  /**\n   * Update a LayerConfig by its name\n   */\n  updateLayer(name: string, fn: ModifyLayerConfigFn): this {\n    const l = this.getLayer(name, true)\n\n    fn(<LayerConfig>l)\n\n    return this\n  }\n\n  createLayer(options: ConfigLayerConstructor): LayerConfig {\n    return new LayerConfig(options)\n  }\n}\n\nconst manager = new LayerConfigManager()\n\nexport default manager\n"],"mappings":"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"}